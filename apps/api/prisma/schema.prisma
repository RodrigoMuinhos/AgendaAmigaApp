generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model pacientes {
  id                    String                    @id
  tutor_id              String
  nome_completo         String
  condicoes             String[]                  @default([])
  alergias              String[]                  @default([])
  plano_saude_operadora String?
  plano_saude_numero    String?
  plano_saude_validade  DateTime?                 @db.Timestamptz(6)
  plano_saude_arquivado Boolean                   @default(false)
  criado_em             DateTime                  @default(now()) @db.Timestamptz(6)
  atualizado_em         DateTime                  @updatedAt @db.Timestamptz(6)
  atendimentos          atendimentos[]
  medicamentos          medicamentos[]
  nutritionChecklists   NutritionDailyChecklist[]
  nutritionSettings     NutritionFeedSettings?
  nutritionMeals        NutritionMealEntry[]
  nutritionReactions    NutritionReaction[]

  @@map("pacientes")
}

model criancas {
  id             String   @id
  tutor_id       String
  nome           String
  nascimento_iso String
  payload        Json
  criado_em      DateTime @default(now()) @db.Timestamptz(6)
  atualizado_em  DateTime @updatedAt @db.Timestamptz(6)

  @@index([tutor_id, criado_em], map: "idx_criancas_tutor")
  @@map("criancas")
}

model profissionais {
  id            String         @id
  nome          String
  especialidade String?
  telefone      String?
  criado_em     DateTime       @default(now()) @db.Timestamptz(6)
  atualizado_em DateTime       @updatedAt @db.Timestamptz(6)
  atendimentos  atendimentos[]

  @@map("profissionais")
}

model medicamentos {
  id                     String       @id
  paciente_id            String
  nome                   String
  dosagem                Decimal      @db.Decimal(10, 3)
  unidade_dosagem        String
  ativo                  Boolean      @default(true)
  esquema_tipo           EsquemaTipo?
  esquema_timezone       String?
  esquema_periodo_inicio DateTime?    @db.Timestamptz(6)
  esquema_periodo_fim    DateTime?    @db.Timestamptz(6)
  esquema_horarios       String[]     @default([])
  esquema_dias_semana    Int[]        @default([]) @db.SmallInt
  criado_em              DateTime     @default(now()) @db.Timestamptz(6)
  atualizado_em          DateTime     @updatedAt @db.Timestamptz(6)
  dose_logs              dose_logs[]
  paciente               pacientes    @relation(fields: [paciente_id], references: [id], onDelete: Cascade)

  @@index([paciente_id])
  @@map("medicamentos")
}

model dose_logs {
  id               String       @id
  medicamento_id   String
  horario_previsto DateTime     @db.Timestamptz(6)
  status           DoseStatus
  horario_real     DateTime?    @db.Timestamptz(6)
  criado_em        DateTime     @default(now()) @db.Timestamptz(6)
  atualizado_em    DateTime     @updatedAt @db.Timestamptz(6)
  medicamento      medicamentos @relation(fields: [medicamento_id], references: [id], onDelete: Cascade)

  @@index([medicamento_id, horario_previsto], map: "idx_dose_logs_medicamento_horario")
  @@map("dose_logs")
}

model atendimentos {
  id              String            @id
  paciente_id     String
  tipo            TipoAtendimento
  area            String?
  profissional_id String?
  local           String?
  data_hora       DateTime          @db.Timestamptz(6)
  status          StatusAtendimento @default(AGENDADO)
  notas           String?
  anexos_url      String[]          @default([])
  criado_em       DateTime          @default(now()) @db.Timestamptz(6)
  atualizado_em   DateTime          @updatedAt @db.Timestamptz(6)
  paciente        pacientes         @relation(fields: [paciente_id], references: [id], onDelete: Cascade)
  profissional    profissionais?    @relation(fields: [profissional_id], references: [id])
  lembretes       lembretes[]

  @@index([paciente_id, data_hora], map: "idx_atendimentos_paciente_data")
  @@map("atendimentos")
}

model lembretes {
  id             String        @id
  atendimento_id String
  minutos_antes  Int
  canal          CanalLembrete
  criado_em      DateTime      @default(now()) @db.Timestamptz(6)
  atualizado_em  DateTime      @updatedAt @db.Timestamptz(6)
  atendimento    atendimentos  @relation(fields: [atendimento_id], references: [id], onDelete: Cascade)

  @@index([atendimento_id])
  @@map("lembretes")
}

model share_links {
  id            String    @id
  tutor_id      String
  token         String    @unique
  escopo        Json
  expiracao     DateTime  @db.Timestamptz(6)
  revogado      Boolean   @default(false)
  criado_em     DateTime  @default(now()) @db.Timestamptz(6)
  atualizado_em DateTime  @updatedAt @db.Timestamptz(6)
  ultimo_acesso DateTime? @db.Timestamptz(6)

  @@map("share_links")
}

model familias {
  id                         String            @id
  nome                       String
  cep                        String?
  endereco                   String?
  bairro                     String?
  cidade                     String?
  estado                     String?
  cuidador_principal         String?
  relacao_cuidador_principal String?
  contato                    String?
  telefone_cuidador          String?
  foco_cuidado               String?
  observacoes                String?
  criado_em                  DateTime          @default(now()) @db.Timestamptz(6)
  atualizado_em              DateTime          @updatedAt @db.Timestamptz(6)
  cuidadores                 cuidadores[]
  membros                    familia_membros[]
  tratamentos                tratamentos[]

  @@map("familias")
}

model familia_membros {
  id               String   @id
  familia_id       String
  nome             String
  data_nascimento  DateTime @db.Date
  documento        String?
  cep              String?
  numero_endereco  String?
  endereco         String?
  bairro           String?
  cidade           String?
  estado           String?
  avatar           String?
  historico_medico String?
  limitacoes       String?
  alergias         String?
  peso             String?
  altura           String?
  imc              String?
  necessidades     String?
  criado_em        DateTime @default(now()) @db.Timestamptz(6)
  atualizado_em    DateTime @updatedAt @db.Timestamptz(6)
  familia          familias @relation(fields: [familia_id], references: [id], onDelete: Cascade)

  @@index([familia_id], map: "idx_familia_membros_familia")
  @@map("familia_membros")
}

model cuidadores {
  id            String   @id
  familia_id    String
  nome          String
  relacao       String?
  telefone      String?
  criado_em     DateTime @default(now()) @db.Timestamptz(6)
  atualizado_em DateTime @updatedAt @db.Timestamptz(6)
  familia       familias @relation(fields: [familia_id], references: [id], onDelete: Cascade)

  @@index([familia_id], map: "idx_cuidadores_familia")
  @@map("cuidadores")
}

model tratamentos {
  id            String    @id
  familia_id    String
  nome          String
  dose          String
  horario       String
  instrucoes    String?
  proxima_dose  DateTime? @db.Timestamptz(6)
  criado_em     DateTime  @default(now()) @db.Timestamptz(6)
  atualizado_em DateTime  @updatedAt @db.Timestamptz(6)
  familia       familias  @relation(fields: [familia_id], references: [id], onDelete: Cascade)

  @@index([familia_id], map: "idx_tratamentos_familia")
  @@map("tratamentos")
}

model NutritionMealEntry {
  id            String              @id @default(cuid())
  childId       String              @map("paciente_id")
  day           DateTime            @map("dia") @db.Date
  mealType      NutritionMealType   @map("tipo")
  acceptance    Int?                @map("aceitacao_media") @db.SmallInt
  notes         String?             @map("observacoes")
  criado_em     DateTime            @default(now()) @db.Timestamptz(6)
  atualizado_em DateTime            @updatedAt @db.Timestamptz(6)
  child         pacientes           @relation(fields: [childId], references: [id], onDelete: Cascade, map: "nutrition_meal_entry_child_fk")
  items         NutritionMealItem[]

  @@unique([childId, day, mealType], map: "nutrition_meal_entry_unique")
  @@map("nutrition_meal_entries")
}

model NutritionMealItem {
  id           String             @id @default(cuid())
  mealId       String             @map("refeicao_id")
  foodItemId   String?            @map("alimento_id")
  customName   String?            @map("nome_personalizado")
  foodGroup    NutritionFoodGroup @map("grupo_alimentar")
  quantity     String?            @map("quantidade")
  texture      NutritionTexture   @map("textura")
  acceptance   Int                @map("aceitacao") @db.SmallInt
  observations String?            @map("observacoes")
  criado_em    DateTime           @default(now()) @db.Timestamptz(6)
  food         NutritionFoodItem? @relation(fields: [foodItemId], references: [id], map: "nutrition_meal_item_food_fk")
  meal         NutritionMealEntry @relation(fields: [mealId], references: [id], onDelete: Cascade, map: "nutrition_meal_item_meal_fk")

  @@index([mealId])
  @@map("nutrition_meal_items")
}

model NutritionFoodItem {
  id            String              @id @default(cuid())
  name          String              @unique @map("nome")
  group         NutritionFoodGroup  @map("grupo")
  criado_em     DateTime            @default(now()) @db.Timestamptz(6)
  atualizado_em DateTime            @updatedAt @db.Timestamptz(6)
  items         NutritionMealItem[]
  reactions     NutritionReaction[]

  @@map("nutrition_food_items")
}

model NutritionReaction {
  id              String             @id @default(cuid())
  childId         String             @map("paciente_id")
  occurredOn      DateTime           @map("data") @db.Date
  description     String             @map("descricao")
  severity        Int                @map("severidade") @db.SmallInt
  relatedFoodId   String?            @map("alimento_id")
  relatedFoodName String?            @map("alimento_manual")
  notes           String?            @map("observacoes")
  criado_em       DateTime           @default(now()) @db.Timestamptz(6)
  atualizado_em   DateTime           @updatedAt @db.Timestamptz(6)
  child           pacientes          @relation(fields: [childId], references: [id], onDelete: Cascade, map: "nutrition_reaction_child_fk")
  relatedFood     NutritionFoodItem? @relation(fields: [relatedFoodId], references: [id], map: "nutrition_reaction_food_fk")

  @@index([childId, occurredOn], map: "idx_nutrition_reactions_child_date")
  @@map("nutrition_reactions")
}

model NutritionDailyChecklist {
  id                String    @id @default(cuid())
  childId           String    @map("paciente_id")
  day               DateTime  @map("dia") @db.Date
  offeredLegume     Boolean   @default(false) @map("ofereceu_legume")
  introducedNewFood Boolean   @default(false) @map("introduziu_novo")
  offeredWater      Boolean   @default(false) @map("ofereceu_agua")
  notes             String?   @map("observacoes")
  criado_em         DateTime  @default(now()) @db.Timestamptz(6)
  atualizado_em     DateTime  @updatedAt @db.Timestamptz(6)
  child             pacientes @relation(fields: [childId], references: [id], onDelete: Cascade, map: "nutrition_checklist_child_fk")

  @@unique([childId, day], map: "nutrition_checklist_unique")
  @@map("nutrition_daily_checklists")
}

model NutritionFeedSettings {
  id                String    @id @default(cuid())
  childId           String    @unique @map("paciente_id")
  honeyAlertEnabled Boolean   @default(true) @map("alerta_mel_habilitado")
  sugarAlertEnabled Boolean   @default(true) @map("alerta_acucar_habilitado")
  notes             String?   @map("observacoes")
  criado_em         DateTime  @default(now()) @db.Timestamptz(6)
  atualizado_em     DateTime  @updatedAt @db.Timestamptz(6)
  child             pacientes @relation(fields: [childId], references: [id], onDelete: Cascade, map: "nutrition_settings_child_fk")

  @@map("nutrition_feed_settings")
}

model MealEntry {
  id        String     @id @default(cuid())
  date      DateTime   @db.Date
  period    MealPeriod
  items     Json
  note      String?    @db.VarChar(160)
  createdAt DateTime   @default(now())
  userId    String

  @@index([userId, date])
  @@map("meal_entries")
}

model Hydration {
  id        String   @id @default(cuid())
  amountMl  Int      @default(200)
  createdAt DateTime @default(now())
  dateTime  DateTime
  userId    String

  @@index([userId, dateTime])
  @@map("hydrations")
}

model FruitIntake {
  id        String   @id @default(cuid())
  kind      String?  @db.VarChar(60)
  createdAt DateTime @default(now())
  dateTime  DateTime
  userId    String

  @@index([userId, dateTime])
  @@map("fruit_intakes")
}

model Preferences {
  createdAt   DateTime @default(now())
  glutenFree  Boolean  @default(false)
  halalKosher Boolean  @default(false)
  lactoseFree Boolean  @default(false)
  tipsTone    String   @default("simple")
  updatedAt   DateTime @updatedAt
  userId      String   @id

  @@map("nutrition_preferences")
}

enum EsquemaTipo {
  DIARIO_HORARIOS_FIXOS
  SEMANAL_DIAS_FIXOS
}

enum DoseStatus {
  PENDENTE
  TOMADO
  ATRASADO
}

enum TipoAtendimento {
  CONSULTA
  EXAME
  TERAPIA
}

enum StatusAtendimento {
  AGENDADO
  REALIZADO
  FALTOU
  CANCELADO
}

enum CanalLembrete {
  PUSH
  EMAIL
  WHATSAPP
}

enum NutritionMealType {
  CAFE
  LANCHE
  ALMOCO
  JANTAR
  EXTRA
}

enum NutritionFoodGroup {
  CEREAIS_TUBERCULOS
  PROTEINA
  VEGETAL
  FRUTA
  GORDURA_BOA
  OUTRO
}

enum NutritionTexture {
  LIQUIDO
  AMASSADO
  PICADO
  SOLIDO
}

enum MealPeriod {
  MORNING
  LUNCH
  AFTERNOON
  DINNER
}
