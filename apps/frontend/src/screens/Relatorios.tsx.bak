import { useEffect, useMemo, useRef, useState } from "react";
import { HighlightCard } from "../components/ui/HighlightCard";
import { ScreenHeader, ScreenSection } from "../components/ui/Screen";
import { cn } from "../utils/cn";

type MoodOption = {
  id: string;
  label: string;
  emoji: string;
  tagline: string;
  gradient: string;
  barGradient: string;
  badge: string;
  ring: string;
};

type MoodLog = {
  dateISO: string;
  moodId: MoodOption["id"];
  note: string;
};

const dayFormatter = new Intl.DateTimeFormat("pt-BR", { weekday: "short" });
const dateFormatter = new Intl.DateTimeFormat("pt-BR", { day: "2-digit", month: "short" });
const noteFormatter = new Intl.DateTimeFormat("pt-BR", { day: "2-digit", month: "long" });

const MOOD_OPTIONS: MoodOption[] = [
  {
    id: "radiante",
    label: "Radiante",
    emoji: "?",
    tagline: "Energia alta e curiosidade",
    gradient: "from-amber-200/70 via-orange-100/40 to-white",
    barGradient: "from-amber-400 via-orange-400 to-orange-500",
    badge: "bg-amber-500/15 text-amber-700",
    ring: "ring-amber-400/40",
  },
  {
    id: "focado",
    label: "Concentrado",
    emoji: "??",
    tagline: "Calmo e atento às atividades",
    gradient: "from-sky-200/60 via-sky-100/30 to-white",
    barGradient: "from-sky-400 via-sky-400 to-sky-500",
    badge: "bg-sky-500/15 text-sky-700",
    ring: "ring-sky-400/40",
  },
  {
    id: "curioso",
    label: "Curioso",
    emoji: "??",
    tagline: "Explorando novidades com brilho nos olhos",
    gradient: "from-violet-200/60 via-violet-100/35 to-white",
    barGradient: "from-violet-400 via-violet-400 to-violet-500",
    badge: "bg-violet-500/15 text-violet-700",
    ring: "ring-violet-400/40",
  },
  {
    id: "sereno",
    label: "Tranquilo",
    emoji: "??",
    tagline: "Rotina fluindo sem maiores desafios",
    gradient: "from-emerald-200/60 via-emerald-100/35 to-white",
    barGradient: "from-emerald-400 via-emerald-400 to-emerald-500",
    badge: "bg-emerald-500/15 text-emerald-700",
    ring: "ring-emerald-400/40",
  },
  {
    id: "afetuoso",
    label: "Afetuoso",
    emoji: "??",
    tagline: "Abraços, toques e conexões genuínas",
    gradient: "from-rose-200/60 via-rose-100/35 to-white",
    barGradient: "from-rose-400 via-rose-400 to-rose-500",
    badge: "bg-rose-500/15 text-rose-700",
    ring: "ring-rose-400/40",
  },
  {
    id: "sensivel",
    label: "Sensível",
    emoji: "??",
    tagline: "Precisando de acolhimento extra",
    gradient: "from-cyan-200/60 via-cyan-100/35 to-white",
    barGradient: "from-cyan-400 via-cyan-400 to-cyan-500",
    badge: "bg-cyan-500/15 text-cyan-700",
    ring: "ring-cyan-400/40",
  },
  {
    id: "agitado",
    label: "Agitado",
    emoji: "?",
    tagline: "Muita energia para direcionar",
    gradient: "from-orange-200/60 via-orange-100/35 to-white",
    barGradient: "from-orange-400 via-orange-400 to-orange-500",
    badge: "bg-orange-500/15 text-orange-700",
    ring: "ring-orange-400/40",
  },
];

const SUMMARY_PRESETS = [
  { id: "7d", label: "7 dias", copy: "os últimos 7 dias", hint: "Visão rápida da semana", days: 7 },
  { id: "30d", label: "30 dias", copy: "os últimos 30 dias", hint: "Tendência do último mês", days: 30 },
  { id: "all", label: "Histórico", copy: "todo o histórico", hint: "Acúmulo completo de registros", days: undefined },
] as const;

type SummaryPreset = (typeof SUMMARY_PRESETS)[number];
type SummaryPresetId = SummaryPreset["id"];

const TIMELINE_PRESETS = [
  { id: 7, label: "7 dias" },
  { id: 14, label: "14 dias" },
  { id: 21, label: "21 dias" },
] as const;

const QUICK_NOTE_HINTS = [
  "Se acalmou com a playlist favorita.",
  "Precisou de um intervalo sensorial.",
  "Mostrou curiosidade extra durante a terapia.",
  "Compartilhou carinho espontâneo com a família.",
] as const;

const MOOD_LOGS: MoodLog[] = [
  { dateISO: isoDaysAgo(0), moodId: "radiante", note: "Brincou com os primos no parque." },
  { dateISO: isoDaysAgo(1), moodId: "curioso", note: "Quis desmontar o brinquedo para entender como funciona." },
  { dateISO: isoDaysAgo(2), moodId: "sereno", note: "Dormiu cedo e acordou super disposto." },
  { dateISO: isoDaysAgo(3), moodId: "agitado", note: "Precisou de pausas após a escola." },
  { dateISO: isoDaysAgo(4), moodId: "radiante", note: "Topou experimentar uma comida nova." },
  { dateISO: isoDaysAgo(5), moodId: "sensivel", note: "Barulhos fortes incomodaram no mercado." },
  { dateISO: isoDaysAgo(6), moodId: "afetuoso", note: "Distribuiu abraços durante todo o dia." },
  { dateISO: isoDaysAgo(7), moodId: "curioso", note: "Perguntou sobre as fases da lua." },
  { dateISO: isoDaysAgo(8), moodId: "focado", note: "Terminou o quebra-cabeça sem distrações." },
  { dateISO: isoDaysAgo(9), moodId: "sereno", note: "Fez respiração guiada com a terapeuta." },
  { dateISO: isoDaysAgo(10), moodId: "radiante", note: "Dançou durante a terapia ocupacional." },
  { dateISO: isoDaysAgo(11), moodId: "sensivel", note: "Preferiu ficar com fones em ambientes cheios." },
  { dateISO: isoDaysAgo(12), moodId: "focado", note: "Ficou 20 minutos lendo calmamente." },
  { dateISO: isoDaysAgo(13), moodId: "agitado", note: "Correu pela casa antes de relaxar." },
  { dateISO: isoDaysAgo(14), moodId: "radiante", note: "Contou piadas no jantar." },
  { dateISO: isoDaysAgo(15), moodId: "sereno", note: "Aceitou pequenas mudanças na rotina." },
  { dateISO: isoDaysAgo(16), moodId: "afetuoso", note: "Fez um desenho para o irmão." },
  { dateISO: isoDaysAgo(17), moodId: "sensivel", note: "Não gostou do barulho da chuva." },
  { dateISO: isoDaysAgo(18), moodId: "curioso", note: "Explorou sons de instrumentos musicais." },
  { dateISO: isoDaysAgo(19), moodId: "focado", note: "Seguiu instruções da terapeuta com facilidade." },
  { dateISO: isoDaysAgo(20), moodId: "radiante", note: "Participou animado do jogo de tabuleiro." },
  { dateISO: isoDaysAgo(21), moodId: "sereno", note: "Rotina da noite sem intercorrências." },
  { dateISO: isoDaysAgo(22), moodId: "curioso", note: "Observou insetos no jardim." },
  { dateISO: isoDaysAgo(23), moodId: "agitado", note: "Precisou de micro-pausas sensoriais." },
  { dateISO: isoDaysAgo(24), moodId: "radiante", note: "Cantarolou músicas favoritas." },
  { dateISO: isoDaysAgo(25), moodId: "sensivel", note: "Rejeitou roupas ásperas na troca." },
  { dateISO: isoDaysAgo(26), moodId: "afetuoso", note: "Mandou mensagens de voz carinhosas." },
  { dateISO: isoDaysAgo(27), moodId: "focado", note: "Montou lego com atenção aos detalhes." },
  { dateISO: isoDaysAgo(28), moodId: "radiante", note: "Riu muito ao ver fotos antigas." },
  { dateISO: isoDaysAgo(29), moodId: "sereno", note: "Fez alongamentos com a mãe antes de dormir." },
];

export function RelatoriosScreen() {
  const noteLimit = 280;
  const [selectedMoodId, setSelectedMoodId] = useState<MoodOption["id"]>(MOOD_OPTIONS[0].id);
  const [note, setNote] = useState("");
  const [feedback, setFeedback] = useState<string | null>(null);
  const feedbackTimeoutRef = useRef<number | null>(null);
  const [summaryRangeId, setSummaryRangeId] = useState<SummaryPresetId>("7d");
  const [mapView, setMapView] = useState<"ranking" | "timeline">("ranking");
  const [timelineRange, setTimelineRange] = useState<number>(TIMELINE_PRESETS[0].id);

  const selectedMood = useMemo(
    () => MOOD_OPTIONS.find((mood) => mood.id === selectedMoodId) ?? MOOD_OPTIONS[0],
    [selectedMoodId]
  );

  const summaryPreset = SUMMARY_PRESETS.find((preset) => preset.id === summaryRangeId) ?? SUMMARY_PRESETS[0];
  const summaryCounts = useMemo(() => aggregateMoodCounts(MOOD_LOGS, summaryPreset.days), [summaryPreset]);
  const summaryTop = useMemo(() => getTopMood(summaryCounts), [summaryCounts]);
  const summaryLeaderboard = useMemo(() => buildLeaderboard(summaryCounts), [summaryCounts]);
  const summaryTotalEntries = useMemo(
    () => Object.values(summaryCounts).reduce((acc, value) => acc + value, 0),
    [summaryCounts]
  );

  const weeklyCounts = useMemo(() => aggregateMoodCounts(MOOD_LOGS, 7), []);
  const monthlyCounts = useMemo(() => aggregateMoodCounts(MOOD_LOGS, 30), []);
  const totalCounts = useMemo(() => aggregateMoodCounts(MOOD_LOGS), []);
  const totalEntries = useMemo(
    () => Object.values(totalCounts).reduce((acc, value) => acc + value, 0),
    [totalCounts]
  );

  const overallLeaderboard = useMemo(() => buildLeaderboard(totalCounts), [totalCounts]);
  const timeline = useMemo(() => buildTimeline(MOOD_LOGS, timelineRange), [timelineRange]);
  const latestNotes = useMemo(() => {
    return [...MOOD_LOGS]
      .sort((a, b) => new Date(b.dateISO).getTime() - new Date(a.dateISO).getTime())
      .slice(0, 5);
  }, []);
  const selectedMoodHistory = useMemo(() => buildMoodHistory(MOOD_LOGS, selectedMoodId, 3), [selectedMoodId]);

  useEffect(() => {
    return () => {
      if (feedbackTimeoutRef.current) {
        window.clearTimeout(feedbackTimeoutRef.current);
      }
    };
  }, []);

  const selectedStats = {
    week: weeklyCounts[selectedMoodId] ?? 0,
    month: monthlyCounts[selectedMoodId] ?? 0,
    total: totalCounts[selectedMoodId] ?? 0,
  };

  const summaryShare =
    summaryTotalEntries > 0 ? Math.round(((summaryCounts[selectedMoodId] ?? 0) / summaryTotalEntries) * 100) : 0;
  const overallShare =
    totalEntries > 0 ? Math.round(((totalCounts[selectedMoodId] ?? 0) / totalEntries) * 100) : 0;

  const handleSaveMood = () => {
    const trimmed = note.trim();

    if (feedbackTimeoutRef.current) {
      window.clearTimeout(feedbackTimeoutRef.current);
    }

    if (trimmed.length < 6) {
      setFeedback("Inclua uma observação rápida para enriquecer o registro.");
      feedbackTimeoutRef.current = window.setTimeout(() => setFeedback(null), 3500);
      return;
    }

    setFeedback(`Humor ${selectedMood.label.toLowerCase()} registrado com carinho.`);
    feedbackTimeoutRef.current = window.setTimeout(() => setFeedback(null), 3500);
    setNote("");
  };

  const handleAppendHint = (hint: string) => {
    setNote((current) => {
      const base = current.trim().length > 0 ? `${current.trim()} ${hint}` : hint;
      return base.length > noteLimit ? base.slice(0, noteLimit) : base;
    });
  };

  return (
    <div className="flex flex-col gap-8">
      <ScreenHeader
        overline="Insights"
        title="Controle emocional com carinho"
        description="Revise tendências, registre como sua família está hoje e compartilhe avanços com quem acompanha a rotina."
        actions={
          <div className="flex flex-wrap gap-2">
            <button className="group relative flex items-center gap-2 rounded-2xl border border-transparent bg-primary px-5 py-2 text-xs font-semibold text-white shadow-elevated transition-transform duration-200 hover:-translate-y-0.5">
              Compartilhar PDF
            </button>
            <button className="group relative flex items-center gap-2 rounded-2xl border border-border/70 bg-surface/95 px-5 py-2 text-xs font-semibold text-muted shadow-soft transition-transform duration-200 hover:-translate-y-0.5 hover:border-primary hover:text-primary hover:shadow-elevated">
              Exportar CSV
            </button>
          </div>
        }
      />

      <ScreenSection
        title="Como a família está hoje?"
        description="Selecione o humor que melhor representa o dia e deixe uma observação para o diário inteligente."
      >
        <div className="grid gap-6 lg:grid-cols-[1.75fr,1fr]">
          <div className="grid gap-3 sm:grid-cols-2 xl:grid-cols-3">
            {MOOD_OPTIONS.map((mood) => {
              const isActive = mood.id === selectedMoodId;
              return (
                <button
                  type="button"
                  key={mood.id}
                  onClick={() => setSelectedMoodId(mood.id)}
                  className={cn(
                    "group relative flex flex-col gap-3 rounded-2xl border px-4 py-4 text-left transition-transform duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary/40",
                    isActive
                      ? "border-primary/70 bg-surface/95 shadow-soft"
                      : "border-border/70 bg-background/90 hover:-translate-y-0.5 hover:border-primary/40 hover:shadow-soft"
                  )}
                >
                  <div className="flex items-start justify-between gap-4">
                    <span className="text-3xl">{mood.emoji}</span>
                    {isActive && (
                      <span className="rounded-full border border-primary/40 bg-primary/10 px-3 py-1 text-[11px] font-semibold text-primary shadow-soft">
                        Hoje
                      </span>
                    )}
                  </div>
                  <div className="space-y-1 text-foreground">
                    <h3 className="text-sm font-semibold">{mood.label}</h3>
                    <p className="text-xs text-muted">{mood.tagline}</p>
                  </div>
                </button>
              );
            })}
          </div>

          <div className="flex flex-col gap-4">
            <article
              className="rounded-3xl border border-border/70 bg-surface/95 p-5 shadow-soft transition-shadow"
            >
              <div className="flex items-start gap-3">
                <span className="text-3xl">{selectedMood.emoji}</span>
                <div className="space-y-1">
                  <h3 className="text-base font-semibold text-foreground">{selectedMood.label}</h3>
                  <p className="text-xs text-muted">{selectedMood.tagline}</p>
                </div>
              </div>
              <div className="mt-4 grid grid-cols-3 gap-2 text-center">
                <div className="rounded-2xl border border-border/60 bg-background/90 px-2 py-3 shadow-soft">
                  <p className="text-[11px] font-semibold uppercase tracking-wide text-muted">7 dias</p>
                  <p className="text-base font-semibold text-foreground">{selectedStats.week}</p>
                </div>
                <div className="rounded-2xl border border-border/60 bg-background/90 px-2 py-3 shadow-soft">
                  <p className="text-[11px] font-semibold uppercase tracking-wide text-muted">30 dias</p>
                  <p className="text-base font-semibold text-foreground">{selectedStats.month}</p>
                </div>
                <div className="rounded-2xl border border-border/60 bg-background/90 px-2 py-3 shadow-soft">
                  <p className="text-[11px] font-semibold uppercase tracking-wide text-muted">Histórico</p>
                  <p className="text-base font-semibold text-foreground">{selectedStats.total}</p>
                </div>
              </div>

              <div className="mt-4 space-y-2">
                <div className="flex items-center justify-between text-xs text-muted">
                  <span>Participação em {summaryPreset.copy}</span>
                  <span className="font-semibold text-foreground">{summaryShare}%</span>
                </div>
                <div className="h-2 rounded-full bg-border/60">
                  <div
                    className="h-full rounded-full bg-primary transition-all duration-500"
                    style={{ width: `${summaryShare}%` }}
                  />
                </div>
                <div className="flex items-center justify-between text-xs text-muted">
                  <span>Histórico geral</span>
                  <span className="font-semibold text-foreground">{overallShare}%</span>
                </div>
              </div>
            </article>

            <article className="flex flex-col gap-3 rounded-3xl border border-border/60 bg-background/95 p-5 shadow-soft">
              <div className="flex items-center justify-between">
                <p className="text-xs font-semibold uppercase tracking-wide text-muted">Observação do dia</p>
                <span className="text-[11px] text-muted">
                  {note.length}/{noteLimit}
                </span>
              </div>
              <textarea
                value={note}
                onChange={(event) => setNote(event.target.value)}
                placeholder="Ex: Hoje o Pedro ficou animado com a aula de música e respondeu bem às pausas sensoriais."
                rows={4}
                maxLength={noteLimit}
                className="w-full rounded-2xl border border-border/60 bg-surface/95 px-4 py-3 text-sm text-foreground shadow-inner focus:border-primary focus:outline-none"
              />
              <div className="flex flex-wrap items-center gap-2">
                {QUICK_NOTE_HINTS.map((hint) => (
                  <button
                    key={hint}
                    type="button"
                    onClick={() => handleAppendHint(hint)}
                    className="rounded-full border border-border/60 bg-background/80 px-3 py-1 text-[11px] font-semibold text-muted transition hover:border-primary/50 hover:text-primary"
                  >
                    {hint}
                  </button>
                ))}
              </div>
              <div className="flex flex-wrap items-center gap-3">
                <button
                  type="button"
                  onClick={handleSaveMood}
                  className="rounded-2xl border border-transparent bg-primary px-5 py-2 text-xs font-semibold text-white shadow-elevated transition-transform duration-200 hover:-translate-y-0.5"
                >
                  Salvar humor de hoje
                </button>
                {feedback && <span className="text-xs font-semibold text-primary">{feedback}</span>}
                {!feedback && note.trim().length === 0 && (
                  <span className="text-xs text-muted">
                    Dica: inclua gatilhos, estratégias que funcionaram ou o que deixou o dia especial.
                  </span>
                )}
              </div>
            </article>

            {selectedMoodHistory.length > 0 && (
              <article className="rounded-3xl border border-border/60 bg-background/95 p-5 shadow-soft">
                <p className="text-xs font-semibold uppercase tracking-wide text-muted">Últimos registros desse humor</p>
                <ul className="mt-3 space-y-3">
                  {selectedMoodHistory.map((log) => (
                    <li key={`${log.dateISO}-${log.moodId}`} className="flex items-center gap-3 text-sm text-foreground">
                      <span className="rounded-full bg-background/90 px-3 py-1 text-[11px] font-semibold text-muted">
                        {noteFormatter.format(new Date(log.dateISO))}
                      </span>
                      <p className="flex-1 text-xs text-muted sm:text-sm">{log.note}</p>
                    </li>
                  ))}
                </ul>
              </article>
            )}
          </div>
        </div>
      </ScreenSection>

      <ScreenSection
        title="Resumo de humores"
        description="Compare rapidamente os registros do período selecionado e descubra quais emoções lideram a jornada."
      >
        <div className="flex flex-col gap-5">
          <div className="flex flex-wrap items-center gap-2">
            <span className="text-xs font-semibold uppercase tracking-wide text-muted">Período</span>
            {SUMMARY_PRESETS.map((preset) => {
              const isActive = preset.id === summaryRangeId;
              return (
                <button
                  key={preset.id}
                  type="button"
                  onClick={() => setSummaryRangeId(preset.id)}
                  className={cn(
                    "rounded-2xl border px-3 py-1.5 text-xs font-semibold transition",
                    isActive
                      ? "border-transparent bg-primary text-white shadow-soft"
                      : "border-border/60 bg-background/90 text-muted hover:border-primary/40 hover:text-primary"
                  )}
                >
                  {preset.label}
                </button>
              );
            })}
          </div>

          <div className="grid gap-4 lg:grid-cols-[1.2fr,1fr]">
            <HighlightCard
              tone="neutral" className="hover:border-primary/40"
              subtitle="Humor destaque"
              title={summaryTop ? `${summaryTop.mood.label} ${summaryTop.mood.emoji}` : "Registre um novo humor"}
              description={
                summaryTop
                  ? `${summaryTop.count} registros em ${summaryPreset.copy}`
                  : "Comece registrando o humor de hoje para liberar os comparativos."
              }
              footer={summaryPreset.hint}
            >
              {summaryTop && (
                <>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-muted">Participação</span>
                    <span className="font-semibold text-foreground">{Math.round(summaryTop.percentage)}%</span>
                  </div>
                  <div className="h-2 rounded-full bg-border/60">
                    <div
                      className="h-full rounded-full bg-white/80 transition-all duration-500"
                      style={{ width: `${summaryTop.percentage}%` }}
                    />
                  </div>
                  <div className="grid grid-cols-2 gap-2 text-xs text-muted">
                    <div className="rounded-2xl border border-border/60 bg-background/90 px-3 py-2 text-foreground shadow-soft">
                      <p className="text-[11px] uppercase tracking-wide text-muted">Segundo lugar</p>
                      <p className="text-sm font-semibold text-foreground">
                        {summaryLeaderboard[1]?.mood.label ?? ""}
                      </p>
                    </div>
                    <div className="rounded-2xl border border-border/60 bg-background/90 px-3 py-2 text-foreground shadow-soft">
                      <p className="text-[11px] uppercase tracking-wide text-muted">Total de registros</p>
                      <p className="text-sm font-semibold text-foreground">{summaryTotalEntries}</p>
                    </div>
                  </div>
                </>
              )}
            </HighlightCard>

            <div className="flex flex-col gap-3">
              {summaryLeaderboard.slice(0, 4).map((entry, index) => {
                const barWidth = entry.percentage === 0 ? 0 : Math.max(entry.percentage, 12);
                return (
                  <div
                    key={entry.mood.id}
                    className="rounded-3xl border border-border/60 bg-background/95 px-4 py-3 shadow-soft"
                  >
                    <div className="flex items-center gap-3">
                      <span className="text-sm font-semibold text-muted">#{index + 1}</span>
                      <div className="flex h-9 w-9 items-center justify-center rounded-2xl bg-background text-lg">
                        {entry.mood.emoji}
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-semibold text-foreground">{entry.mood.label}</p>
                        <p className="text-xs text-muted">{entry.count} registro(s)</p>
                      </div>
                      <span className="rounded-full bg-background/80 px-3 py-1 text-[11px] font-semibold text-muted">
                        {Math.round(entry.percentage)}%
                      </span>
                    </div>
                    <div className="mt-3 h-1.5 w-full rounded-full bg-border/60">
                      <div
                        className={cn(
                          "h-full rounded-full transition-all duration-500",
                          entry.count === 0 ? "bg-border/80" : "bg-primary"
                        )}
                        style={{ width: `${barWidth}%` }}
                      />
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </ScreenSection>

      <ScreenSection
        title="Mapa emocional"
        description="Veja o ranking geral e os últimos dias para entender gatilhos e celebrações."
      >
        <div className="flex flex-wrap items-center gap-2">
          {(["ranking", "timeline"] as const).map((view) => {
            const isActive = mapView === view;
            return (
              <button
                key={view}
                type="button"
                onClick={() => setMapView(view)}
                className={cn(
                  "rounded-2xl border px-3 py-1.5 text-xs font-semibold capitalize transition",
                  isActive
                    ? "border-transparent bg-primary text-white shadow-soft"
                    : "border-border/60 bg-background/90 text-muted hover:border-primary/40 hover:text-primary"
                )}
              >
                {view === "ranking" ? "Ranking" : "Linha do tempo"}
              </button>
            );
          })}
          {mapView === "timeline" && (
            <div className="ml-auto flex gap-2">
              {TIMELINE_PRESETS.map((preset) => {
                const isActive = timelineRange === preset.id;
                return (
                  <button
                    key={preset.id}
                    type="button"
                    onClick={() => setTimelineRange(preset.id)}
                    className={cn(
                      "rounded-full border px-3 py-1 text-[11px] font-semibold transition",
                      isActive
                        ? "border-transparent bg-primary text-white shadow-soft"
                        : "border-border/60 bg-background/90 text-muted hover:border-primary/40 hover:text-primary"
                    )}
                  >
                    {preset.label}
                  </button>
                );
              })}
            </div>
          )}
        </div>

        {mapView === "ranking" ? (
          <ul className="mt-4 grid gap-3 lg:grid-cols-2 xl:grid-cols-3">
            {overallLeaderboard.slice(0, 6).map((entry, index) => {
              const barWidth = entry.percentage === 0 ? 0 : Math.max(entry.percentage, 10);
              return (
                <li
                  key={entry.mood.id}
                  className="flex flex-col gap-3 rounded-3xl border border-border/60 bg-background/95 px-4 py-4 shadow-soft transition-transform duration-200 hover:-translate-y-0.5 hover:shadow-elevated"
                >
                  <div className="flex items-center gap-3">
                    <span className="text-sm font-semibold text-muted">#{index + 1}</span>
                    <div className="flex h-10 w-10 items-center justify-center rounded-2xl bg-background text-lg">
                      {entry.mood.emoji}
                    </div>
                    <div className="flex flex-col">
                      <span className="text-sm font-semibold text-foreground">{entry.mood.label}</span>
                      <span className="text-xs text-muted">{entry.mood.tagline}</span>
                    </div>
                    <span className="ml-auto rounded-full bg-background/80 px-3 py-1 text-[11px] font-semibold text-muted">
                      {entry.count}x
                    </span>
                  </div>
                  <div className="h-2 w-full rounded-full bg-border/60">
                    <div
                      className={cn(
                        "h-full rounded-full transition-all duration-500",
                        entry.count === 0 ? "bg-border/80" : "bg-primary"
                      )}
                      style={{ width: `${barWidth}%` }}
                    />
                  </div>
                </li>
              );
            })}
          </ul>
        ) : (
          <ul className="mt-4 space-y-3">
            {timeline.map((item) => (
              <li
                key={item.date.toISOString()}
                className={cn(
                  "flex items-center gap-3 rounded-3xl border px-4 py-3 shadow-soft transition",
                  item.mood
                    ? "border-border/60 bg-background/95 hover:-translate-y-0.5 hover:border-primary/30 hover:shadow-elevated"
                    : "border-dashed border-border/60 bg-surface/95"
                )}
              >
                <div className="flex h-10 w-10 items-center justify-center rounded-2xl bg-background text-lg">
                  {item.mood ? item.mood.emoji : ""}
                </div>
                <div className="flex flex-1 flex-col">
                  <span className="text-sm font-semibold text-foreground">{item.label}</span>
                  <span className="text-xs text-muted">
                    {item.mood ? item.mood.tagline : "Aguardando registro"}
                  </span>
                </div>
                {item.mood && (
                  <span className={cn("rounded-full px-3 py-1 text-[11px] font-semibold", item.mood.badge)}>
                    {item.mood.label}
                  </span>
                )}
              </li>
            ))}
          </ul>
        )}
      </ScreenSection>

      <ScreenSection
        title="Observações que valem ouro"
        description="Leve para consultas os detalhes que mostram evolução e gatilhos importantes."
      >
        <div className="flex gap-4 overflow-x-auto pb-2 pt-1 [scrollbar-width:'none'] [-ms-overflow-style:'none']">
          {latestNotes.map((log) => {
            const mood = MOOD_OPTIONS.find((option) => option.id === log.moodId) ?? MOOD_OPTIONS[0];
            return (
              <article
                key={`${log.dateISO}-${log.moodId}`}
                className="min-w-[240px] rounded-3xl border border-border/60 bg-background/95 px-4 py-4 shadow-soft transition-transform duration-200 hover:-translate-y-0.5 hover:shadow-elevated sm:min-w-[260px]"
              >
                <div className="flex items-center justify-between gap-2">
                  <span className="flex items-center gap-2 text-sm font-semibold text-foreground">
                    {mood.emoji} {mood.label}
                  </span>
                  <span className="rounded-full bg-background/80 px-3 py-1 text-[11px] font-semibold text-muted">
                    {noteFormatter.format(new Date(log.dateISO))}
                  </span>
                </div>
                <p className="mt-3 text-sm text-muted">{log.note}</p>
              </article>
            );
          })}
        </div>
      </ScreenSection>
    </div>
  );
}

function aggregateMoodCounts(logs: MoodLog[], days?: number) {
  const baseline = Object.fromEntries(MOOD_OPTIONS.map((mood) => [mood.id, 0])) as Record<MoodOption["id"], number>;
  const now = new Date();
  now.setHours(23, 59, 59, 999);
  const limitTimestamp = typeof days === "number" ? now.getTime() - days * 24 * 60 * 60 * 1000 : null;

  logs.forEach((log) => {
    const timestamp = new Date(log.dateISO).getTime();
    if (limitTimestamp !== null && timestamp < limitTimestamp) {
      return;
    }
    baseline[log.moodId] += 1;
  });

  return baseline;
}

function getTopMood(counts: Record<MoodOption["id"], number>) {
  const entries = Object.entries(counts) as Array<[MoodOption["id"], number]>;
  const total = entries.reduce((acc, [, value]) => acc + value, 0);
  if (total === 0) {
    return null;
  }
  const [bestId, bestCount] = entries.reduce<[MoodOption["id"], number]>((acc, current) => {
    return current[1] > acc[1] ? current : acc;
  }, entries[0]);

  const mood = MOOD_OPTIONS.find((option) => option.id === bestId) ?? MOOD_OPTIONS[0];
  return {
    mood,
    count: bestCount,
    percentage: total === 0 ? 0 : (bestCount / total) * 100,
  };
}

function buildLeaderboard(counts: Record<MoodOption["id"], number>) {
  const total = Object.values(counts).reduce((acc, value) => acc + value, 0);
  return MOOD_OPTIONS
    .map((mood) => ({
      mood,
      count: counts[mood.id] ?? 0,
      percentage: total === 0 ? 0 : ((counts[mood.id] ?? 0) / total) * 100,
    }))
    .sort((a, b) => b.count - a.count);
}

function buildTimeline(logs: MoodLog[], days: number) {
  const today = new Date();
  today.setHours(12, 0, 0, 0);

  return Array.from({ length: days }, (_, index) => {
    const date = new Date(today);
    date.setDate(today.getDate() - (days - 1 - index));
    const moodLog = logs.find((log) => isSameDay(new Date(log.dateISO), date));
    const mood = moodLog ? MOOD_OPTIONS.find((option) => option.id === moodLog.moodId) ?? null : null;

    return {
      date,
      mood,
      label: `${capitalize(dayFormatter.format(date))} · ${dateFormatter.format(date)}`,
    };
  });
}

function buildMoodHistory(logs: MoodLog[], moodId: MoodOption["id"], limit: number) {
  return logs
    .filter((log) => log.moodId === moodId)
    .sort((a, b) => new Date(b.dateISO).getTime() - new Date(a.dateISO).getTime())
    .slice(0, limit);
}

function isSameDay(a: Date, b: Date) {
  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
}

function isoDaysAgo(days: number) {
  const date = new Date();
  date.setHours(12, 0, 0, 0);
  date.setDate(date.getDate() - days);
  return date.toISOString();
}

function capitalize(text: string) {
  if (!text) {
    return "";
  }
  return text.charAt(0).toUpperCase() + text.slice(1);
}









