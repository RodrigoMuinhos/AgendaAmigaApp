# syntax=docker/dockerfile:1

##############################
# Base leve com utilitários #
##############################
FROM node:20-alpine AS base
WORKDIR /app

# Variáveis úteis
ENV CI=true \
    PNPM_HOME="/root/.local/share/pnpm" \
    PRISMA_SKIP_POSTINSTALL=1

# utilitários úteis (inclui libs para Prisma em Alpine)
RUN apk add --no-cache \
    bash \
    curl \
    postgresql-client \
    openssl \
    libc6-compat

################################
# Camada de dependências (NPM) #
################################
FROM base AS deps

# Copiamos somente manifests que afetam resolução de deps (melhor cache)
COPY package.json package-lock.json ./
COPY apps/api/package.json apps/api/package.json
COPY packages/shared/package.json packages/shared/package.json

# Instala TODAS as deps (monorepo)
# legacy-peer-deps evita que peer conflicts travem build antigos
RUN npm ci --legacy-peer-deps

#########################################
# Imagem de desenvolvimento da nossa API#
#########################################
FROM deps AS development
ENV NODE_ENV=development

# Código
COPY . .

# Gera Prisma Client (musl) para ambiente dev
RUN npx prisma generate --schema=apps/api/prisma/schema.prisma

EXPOSE 3000
EXPOSE 5555
CMD ["node", "-e", "console.log('Use docker-compose to start this service')"]

##############################
# Build de produção (builder)#
##############################
FROM deps AS builder
ENV NODE_ENV=production

# Código
COPY . .

# 1) Gerar Prisma Client (produção)
RUN npx prisma generate --schema=apps/api/prisma/schema.prisma

# 2) Build dos pacotes (ajuste se seus scripts forem outros)
RUN npm run build -w @agenda-amiga/shared && \
    npm run build -w @agenda-amiga/api

# Normaliza a pasta dist da API (remove prefixo apps/api/src)
RUN if [ -d "apps/api/dist/apps/api/src" ]; then \
      mkdir -p apps/api/dist.tmp && \
      cp -r apps/api/dist/apps/api/src/. apps/api/dist.tmp/ && \
      rm -rf apps/api/dist && \
      mv apps/api/dist.tmp apps/api/dist; \
    fi

##################################
# Runtime de produção (Render)   #
##################################
FROM node:20-alpine AS production
WORKDIR /app

# Ambiente de produção + segurança contra scripts
ENV NODE_ENV=production \
    HUSKY=0 \
    NPM_CONFIG_AUDIT=false \
    NPM_CONFIG_FUND=false \
    npm_config_ignore_scripts=true

# Dependências mínimas para runtime (curl pro healthcheck, openssl p/ drivers)
RUN apk add --no-cache curl openssl libc6-compat

# Copia apenas manifests necessários (melhor cache do npm ci)
COPY package.json package-lock.json ./
COPY apps/api/package.json apps/api/package.json
COPY packages/shared/package.json packages/shared/package.json

# Instala SOMENTE deps de prod dos workspaces
# Ignore scripts para não acionar prepare/husky em commits antigos
RUN npm ci --omit=dev --ignore-scripts

# Copia artefatos já buildados
COPY --from=builder /app/apps/api/dist apps/api/dist
COPY --from=builder /app/packages/shared/dist packages/shared/dist

# (Opcional) Copiar prisma schema se sua API ler em runtime para validações
COPY apps/api/prisma apps/api/prisma

# Porta usada pelo Render
EXPOSE 3000

# Healthcheck simples (ajuste o path/porta se necessário)
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
  CMD curl -fsS http://localhost:3000/health || exit 1

# Start
CMD ["node", "apps/api/dist/index.js"]
